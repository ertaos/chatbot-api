service: ertaos-chatbot-api

plugins:
  - serverless-certificate-creator
  - serverless-domain-manager

provider:
  name: aws
  region: eu-central-1
  runtime: nodejs18.x
  versionFunctions: false
  stage: ${opt:stage, 'dev'}
  iam:
    role:
      statements:
        - Effect: Allow
          Action: '*'
          Resource:
            Fn::GetAtt: [ conversationsTable, Arn ]

custom:
  openAISecrets: ${ssm:/aws/reference/secretsmanager/OpenAICredentials/ertaosBot}
  customCertificate:
    certificateName: ${self:provider.stage}-api-chatbot.ertaos.com
    tags:
      createdBy: 'serverless'
      environment: ${self:provider.stage}
      application: ertaos-chatbot-api
  customDomain:
    domainName: ${self:provider.stage}-api-chatbot.ertaos.com
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
    autoDomain: true

functions:
  askQuestion:
    handler: dist/app.askQuestion
    timeout: 10
    events:
      - http:
          method: POST
          path: askQuestion
          cors: true
    environment:
      GOOGLE_APPLICATION_CREDENTIALS: ${ssm(raw):/aws/reference/secretsmanager/GoogleApplicationCredentials/ertaosBot}
      OPENAI_API_KEY: ${self:custom.openAISecrets.ApiKey}
      CONVERSATIONS_TABLE: ertaos-chatbot-conversations-${self:provider.stage}

resources:
  Resources:
    conversationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ertaos-chatbot-conversations-${self:provider.stage}
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: conversationId
            AttributeType: S
        KeySchema:
          - AttributeName: conversationId
            KeyType: HASH

